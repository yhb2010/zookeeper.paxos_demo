三态：
	分布式系统的每一次请求与响应，存在特有的三态概念，即成功、失败与超时。
	可能的超时现象：
	1、由于网络原因，该请求并没有被成功的发送到接收方，而是在发送过程就发生了消息丢失现象。
	2、该请求成功的被发送接收方接收后，并进行了处理，但是在将响应反馈给发送方的过程中，发生了消息丢失现象。
	
事务具有四个特性，分别是原子性、一致性、隔离性、持久性。
	原子性：只允许出现以下两种状态：1、全部成功执行，2、全部不执行。
	
CAP定理：
	告诉我们，一个分布式系统不可能同时满足一致性、可用性、分区容错性这三个基本需求，最多只能同时满足其中的两项。
	一致性：在多个副本之间是否能够保持一致的特性
	可用性：对于用于的每一个操作请求总是能够在有限时间内返回结果。
	有限时间：对于用户的一个操作请求，系统必须能够在指定的时间内返回对应的处理结果，如果超过了这个时间范围，那么系统就被认为是不可用的。
	返回结果：要求系统在完成对用户请求的处理后，返回一个正常的响应结果。
	分区容错性：分布式系统在遇到任何网络分区故障的时候，仍然需要能够保证对外提供满足一致性和可用性的服务，除非是整个网络环境都发生了故障。
	网络分区是指在分布式系统中，不同的节点分布在不同的子网络（机房或异地网络等）中，由于一些特殊的原因导致这些子网络之间出现网络不连通的状态，但各个子网络的内部网络是正常的，
	从而导致整个系统的网络环境被切分成了若干个孤立的区域。
	
BASE理论：
	Basically Available（基本可用）、Soft state（软状态）、Eventually consistent（最终一致性）。
	其核心思想是即使无法做到强一致性，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性。
	基本可用：响应时间上的损失；功能上的损失。
	弱状态：允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。
	最终一致性：需要系统保证数据能够达到一致，而不需要实时保证系统数据的强一致性。
	实际应用中，最终一致性分为五类：
	1、因果一致性：如果进程A在更新完某个数据项后，通知了进行B，那么进程B之后对该数据项的访问都应该能够获取到进程A更新后的最新值，并且如果进程B要对该数据项进行更新操作的话，
	务必基于进程A更新后的最新值，即不能发生丢失更新情况。
	2、读已之所写：进程A更新一个数据项后，它自己总是能够访问到更新过的最新值，而不会看到旧值。
	3、会话一致性：系统能够保证在同一个有效的会话中实现“读已之所写”的一致性。
	4、单调读一致性：如果一个进程从系统中读取出一个数据项的某个值后，那么系统对于该进程后续的任何数据访问都不应该返回更旧的值。
	5、单调写一致性：一个系统需要能够保证来自同一个进程的写操作被顺序的执行。