在zookeeper中，事务是指能够改变zookeeper服务器状态的操作，我们也称之为事务操作或更新操作，一般包括数据节点创建与删除、数据节点
内容更新和客户端会话创建与失效等操作，对于每一个事务请求，zookeeper都会为其分配一个全局唯一的事务id，用zxid来表示，通常是一个64
位的数字。

stat对象状态属性说明：
	1、czxid：即created zxid，表示该数据节点被创建时的事务id
	2、mzxid：即modified zxid，表示该节点最后一次被更新时的事务id
	3、ctime：即created time，表示节点被创建的时间
	4、mtime：即modified time，表示该节点最后一次被更新的时间
	5、version：数据节点的版本号
	6、cversion：子节点的版本号
	7、aversion：节点的acl版本号
	8、ephemeralOwner：创建该临时节点的会话的sessionid，如果该节点是持久节点，那么这个属性值为0
	9、dataLength：数据内容的长度
	10、numChildren：当前节点的子节点个数
	11、pzxid：表示该节点的子节点列表最后一次被修改时的事务id，注意，只有子节点列表变更了才会变更pzxid，子节点内容变更不会影响pzxid

在一个数据节点/zk-book被创建完毕后，节点的version值是0，表示的含义是“当前节点自从创建之后，被更新过0次”。如果现在对该节点的数据内容
进行更新操作，那么随后，version值就会变成1，同时需要注意的是，其表示的是对数据节点数据内容的变更次数，强调的是变更次数，因此即使前后
两次变更并没有使得数据内容的值发生变化，version的值任然会变更。

客户端无法直接从process事件中获取到对应数据节点的原始数据内容以及变更后的新数据内容，而是需要客户端再次主动去重新获取数据。

zookeeper的watcher具有以下几个特性:
	1、一次性
	无论是服务端还是客户端，一旦一个watcher被触发，zookeeper都会将其从相应的存储中移除，因此，开发人员在watcher的使用上要记住的一
	点是需要反复注册。这样的设计有效的减轻了服务端的压力，试想，如果注册一个watcher之后一直有效，那么，针对那些更新非常频繁的节点，
	服务端会不断的向客户端发送事件通知，这无论对于网络还是服务端性能的影响都非常大。
	2、客户端串行执行
	客户端watcher回调的过程是一个串行同步的过程，这为我们保证了顺序，同时，需要开发人员注意的一点是，千万不要因为一个watcher的处理
	逻辑影响了整个客户端的watcher回调。